# This is a basic workflow to help you get started with Actions
name: CI-CD

on:
  # Triggers the workflow on push events only for the main branch
  push:
    branches: [main]

jobs:
  # This workflow contains multiple jobs
  build_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Install application dependencies
      - name: Install dependencies
        run: |
          npm install

      # Build the application
      - name: Build the application
        run: |
          npm run build

  push_to_Docker_Hub:
    # This job builds the Docker image and pushes it to Docker Hub
    runs-on: ubuntu-latest
    # Only run if the build_test job is successful
    needs: [build_test]
    steps:
      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # Build and push the Docker image
      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: dilysnguyen/tripjoy_client:lastest  # Change the tag as needed

  deploy_to_EC2:
    # This job deploys the application to an EC2 instance
    runs-on: ubuntu-latest
    needs: [push_to_Docker_Hub]
    steps:
      # Checkout code again (if needed)
      - uses: actions/checkout@v2

      # Deploy to EC2
      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # Secret for your EC2 SSH private key
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@13.210.233.238<< 'EOF'
            docker stop tripjoy_client || true  # Stop the old container    
            docker rm tripjoy_client || true     # Remove the old container
            docker pull dilysnguyen/tripjoy_client:lastest  # Pull the new image from Docker Hub
            docker run -d -p 8080:80 --name tripjoy_client dilysnguyen/tripjoy_client:lastest  # Run the new container
          EOF
